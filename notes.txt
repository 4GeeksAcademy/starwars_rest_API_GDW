NB: Use Reading from "Building StarWars Data Model" for this project


/// MAIN FILES EXPLAINER ///

- app.py = where we save our endpoints + where our data is shown on the screen  

    > OUR SERVER 

- models.py = same as starwars database model, the models for the tables 

    > using SQL + Flask 

- utils.py = where we store functions, and allows us to generate html on the root endpoint  

    > API LIVE "/"

- admin.py = GUI in order to more easily see and edit our database   

    > DATABASE GUI "/admin"

- wsgi.py = imports the application and executes a conditional  



/// PSQL (VIEW DATABASE IN TERMINAL) ///

- 'psql -h localhost -p <portNumber> example -U gitpod' = what we need to access the database 
    > '-h' = host
    > '-p' = port 
    > 'example -U' = from readme.md 
    > 'gitpod' = user

- PSQL Commands:
    > 'example=# \dt' = visualises databases we have
    > 'example=# \d <tablename>' = visualises all the info of a specific table
    > 'example=# select * from "<tablename>"' = shows all from x table 
    > 'example=# \q' = exits psql



/// PIPFILE (VIEW DATABASE VIUSALLY) ///

- Inside API Live click "/admin" or enter API url/admin to see visual database 

    > appears as a result of 'flash-admin = "*"' inside pipfile



/// PIPENV COMMANDS ///

- pipenv run start = starts API live

    > NB: change visibility to public for Postman access
    > API live is set to "/" endpoint and comes from a function in utils.py 
    > In middle of page = endpoints 
    > "API host" = basepoint for the endpoints, similar to SWAPI.tech 

- pipenv init = starts up pipenv 

- pipenv run migrate = like git commit 

    > use this command each time you alter the models.py file  
    > don't include versions in this until very end when finished (as can cause conflicts between projects)
  
- pipenv run upgrade = like git push 

---------------------------------------

* URL: (https://docs.google.com/document/d/14WOnDcRt2hQ9ShsJHmgdsnFIjM2d4B0ji04wxJFCIFk/edit#heading=h.pf589isj2cuo)
    
    > Section on 'Select' has everything we need to make our GET request. 
  
* migrations folder = stores our tables and versions, creates version history --> don't upload migrations to github!!!


NOTAS DE CLASE: 

- Añade las categorias a la vez, no añadas más luego 
- We can create DB via Postman o API Live GUI 

- Tarea: 
  + GET, POST, PUT (DELETE) para cada tabla 
  + GET + POST de las tablas de favs

Hay error en las instrucciones de 4 Geeks, debería ser así
[GET] /users/<int:user_id>/favorites
[POST] /favorite/<int:user_id/planet/<int:planet_id>

Jose: 
para mí, cuando queremos coger los favoritos del usuario, mi endpoint
código tiene que consultar los 3 tablas y coger todos los favoritos 
relacionados con un usuario 


----------------------------------------
TODO:

* USER
    - GET 1 user x
    - GET ALL users x
    - POST x
    - PUT x
    - DELETE x

* PLANETS 
    - GET 1 planet x
    - GET ALL planets x
    - POST x
    - PUT x
    - DELETE x

* VEHICLES 
    - GET 1 vehicle x
    - GET ALL vehicles x
    - POST x
    - PUT x
    - DELETE x

* CHARACTERS 
    - GET 1 character x
    - GET ALL characters x
    - POST x
    - PUT x
    - DELETE x

* USER FAVORITES 
    - GET 1 user favs (planets, vehicles, chars) X
    - GET ALL user favs (planets, vehicles, chars) X
    - POST 
    - DELETE 
